<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- css와 js는 이걸로 매핑을 해줘야함.이 파일이 들어있는 폴더 정의 -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- 여기 빈 만들어 두면된다. -->
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- component용도의 스캔, 애노테이션 찾아서 빈으로 만들어주는 애들 -->
	<context:component-scan base-package="com.naver.myhome5" />
	
	<!-- 프로퍼티 파일을 이용해서 값을 주입하는 방법
	1. context 네임스페이스의 property-placeholder 태그를 추가하고 앞에서
	만든 프로퍼티 파일의 위치를 지정합니다.
	2. Controller에서 @Value을 이용하여 값을 가져옵니다.
	@Value 애노테이션의 주요 용도는 자바 코드 외부의 리소스나 환경정보에 담긴 값을 사용하도록
	지정해주는데 있습니다.
	 -->
	 <!-- :앞이 네임스페이스다. context, task 네임스페이스 추가해줘야한다.-->
	 <context:property-placeholder location="classpath:pro/savefolder.properties"/>
	<!-- 주기적인 작업이 있을때 @Scheduled 애노테이션을 사용하면 쉽게 적용할 수 있다. @Scheduled(fixedDelay=1000) -->
	<!-- 스케쥴러 만들었는데 작동안되면 아래가 빠진것 [시험] ,특수한 애노테이션 쓰면 서블릿.xml에 다 넣어줘야함 -->
	<task:annotation-driven/>
</beans:beans>
